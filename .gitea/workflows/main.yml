name: Build on Ops, Deploy to App Server

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # 這裡的 runs-on 標籤依然重要，它決定了基礎工作環境
    runs-on: ubuntu-latest 
    
    # 這是最關鍵的新增部分！
    container:
      # 我們可以繼續使用預設的 node 鏡像，或者換成一個更純淨的
      image: node:18-bullseye 
      # 關鍵中的關鍵：為這個 job 的臨時容器也掛載 Docker Socket
      options: -v /var/run/docker.sock:/var/run/docker.sock

    steps:
      # 步驟 1: 在這個臨時容器內，安裝 Docker CLI
      # 這樣，後續步驟就能找到 docker 命令了
      - name: Install Docker CLI
        run: |
          apt-get update
          apt-get install -y docker.io

      # 步驟 2: 檢出程式碼
      - name: Checkout code
        uses: actions/checkout@v3

      # 步驟 3: 設置 Docker Buildx (現在它可以在容器內正常工作了)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步驟 4: 建置 Docker 映像並保存
      - name: Build and save Docker Image
        id: build_image
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)-${GITEA_SHA::7}
          IMAGE_NAME=ragforq-app:${IMAGE_TAG}
          
          docker build -t $IMAGE_NAME .
          echo "Image built: $IMAGE_NAME"
          
          docker save $IMAGE_NAME -o ragforq-app.tar
          echo "Image saved to ragforq-app.tar"
          
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITEA_ENV

      # 步驟 5: 部署到應用伺服器 (這部分不變)
      - name: Deploy to Application Server (.121)
        uses: appleboy/ssh-action@master
        with:
          host: 192.168.100.121
          username: qsiadmin
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "ragforq-app.tar"
          target: "/home/qsiadmin/"
          script: |
            cd /home/qsiadmin/
            docker load < ragforq-app.tar
            CONTAINER_NAME=ragforq-production
            if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
              docker stop $CONTAINER_NAME
              docker rm $CONTAINER_NAME
            fi
            mkdir -p ~/rag_data/db
            mkdir -p ~/rag_data/documents
            mkdir -p ~/.cache/huggingface
            docker run -d \
              --gpus all \
              --name $CONTAINER_NAME \
              -p 8501:8501 \
              -p 8000:8000 \
              -v ~/rag_data/db:/app/db \
              -v ~/rag_data/documents:/app/documents \
              -v ~/.cache/huggingface:/root/.cache/huggingface \
              ${{ env.IMAGE_NAME }}
            docker image prune -f
            rm ragforq-app.tar