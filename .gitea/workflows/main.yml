# 工作流名稱
name: Build on Ops, Deploy to App Server

# 觸發條件：當 main 分支有 push 操作時
on:
  push:
    branches:
      - master

# 工作定義
jobs:
  build-and-deploy:
    # 指定 Runner 標籤，Gitea 會尋找帶有此標籤的 Runner 來執行任務
    runs-on: ubuntu-latest
    
    # 定義這個 job 在什麼樣的臨時容器中運行
    container:
      # 使用基於 Debian Bullseye 的 Node.js 鏡像，它包含了一個乾淨的 Linux 環境
      image: node:18-bullseye

    # Job 中的步驟
    steps:
      # 步驟 1: 在臨時容器中安裝必要的客戶端工具
      - name: Install SSH, SCP and Docker CLI
        run: |
          # 更新包列表
          apt-get update
          # 安裝 OpenSSH 客戶端 (提供 ssh 和 scp) 和 Docker 客戶端
          apt-get install -y openssh-client docker.io

      # 步驟 2: 檢出（下載）您的倉庫程式碼到工作區
      - name: Checkout code
        uses: actions/checkout@v3

      # 步驟 3: 設置 Docker Buildx，這是一個現代化的 Docker 建置工具
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步驟 4: 建置 Docker 映像並打包成 .tar 文件
      - name: Build and save Docker Image
        id: build_image
        run: |
          # 使用 'cut' 命令從 GITEA_SHA 獲取前7位作為短哈希，以兼容所有 shell
          SHORT_SHA=$(echo $GITEA_SHA | cut -c1-7)
          # 組合出一個唯一的映像標籤，包含日期時間和短哈希
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)-${SHORT_SHA}
          IMAGE_NAME=ragforq-app:${IMAGE_TAG}
          
          echo "Building Docker image: ${IMAGE_NAME}"
          docker build --build-arg ENABLE_GPU=true --build-arg BUILDER_IMAGE=nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04 --build-arg FINAL_IMAGE=nvidia/cuda:12.1.1-cudnn8-runtime-ubuntu22.04 -t $IMAGE_NAME .
          
          # 將建置好的映像保存到工作區的根目錄下，使用絕對路徑以避免混淆
          echo "Saving image to tarball..."
          docker save $IMAGE_NAME -o ${GITEA_WORKSPACE}/ragforq-app.tar
          
          # 將映像名和 tar 包的路徑存入環境變數，供後續步驟使用
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITEA_ENV
          echo "IMAGE_PATH=${GITEA_WORKSPACE}/ragforq-app.tar" >> $GITEA_ENV

      # 步驟 5: 部署到應用伺服器 (.121)
      - name: Deploy to Application Server (.121)
        # 將 Gitea Secret 中的私鑰注入到這個步驟的環境變數中
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        # 執行 Shell 腳本
        run: |
          # --- SSH 環境準備 ---
          echo "Setting up SSH environment..."
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # 創建 ssh config 來禁用嚴格主機檢查，避免 CI 流程因交互而中斷
          cat <<EOT > ~/.ssh/config
          Host 192.168.100.121
            StrictHostKeyChecking no
            User qsiadmin
          EOT
          
          # --- 檔案傳輸 ---
          echo "Transferring Docker image to 192.168.100.121..."
          scp ${IMAGE_PATH} 192.168.100.121:/home/qsiadmin/ragforq-app.tar
          
          # --- 遠程執行部署 ---
          echo "Executing remote deployment script on 192.168.100.121..."
          ssh 192.168.100.121 << 'EOF'
            # --- 以下是在遠程主機 .121 上執行的命令 ---
            
            echo "-> Checking for tarball..."
            if [ ! -f "/home/qsiadmin/ragforq-app.tar" ]; then
                echo "-> ERROR: ragforq-app.tar not found on remote server!"
                exit 1
            fi

            echo "-> Loading Docker image from tarball..."
            if ! docker load < /home/qsiadmin/ragforq-app.tar; then
                echo "-> ERROR: Failed to load Docker image. Check disk space on .121"
                # 清理失敗的傳輸文件
                rm /home/qsiadmin/ragforq-app.tar
                exit 1
            fi

            CONTAINER_NAME=ragforq-production
            echo "-> Stopping and removing old container if it exists..."
            if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
              docker stop $CONTAINER_NAME
              docker rm $CONTAINER_NAME
            fi

            echo "-> Preparing data directories..."
            mkdir -p ~/rag_data/db
            mkdir -p ~/rag_data/documents
            mkdir -p ~/rag_data/models
            mkdir -p ~/rag_data/backups
            mkdir -p ~/ragforq_logs
            mkdir -p ~/.cache/huggingface

            echo "-> Finding the name of the loaded image..."
            IMAGE_TO_RUN=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep 'ragforq-app' | head -n 1)

            if [ -z "${IMAGE_TO_RUN}" ]; then
                echo "-> ERROR: Could not find the loaded image 'ragforq-app' in Docker."
                rm /home/qsiadmin/ragforq-app.tar
                exit 1
            fi

            echo "-> Checking GPU support on deployment server..."
            if command -v nvidia-smi >/dev/null 2>&1; then
                echo "-> ✅ NVIDIA GPU detected:"
                nvidia-smi --query-gpu=name,memory.total --format=csv,noheader,nounits 2>/dev/null || echo "-> ⚠️ GPU info unavailable"
                GPU_SUPPORT="--gpus all"
            else
                echo "-> ⚠️ No NVIDIA GPU detected, using CPU mode"
                GPU_SUPPORT=""
            fi

            echo "-> Running new container with image: ${IMAGE_TO_RUN}"
            docker run -d \
              $GPU_SUPPORT \
              --restart always \
              --network=host \
              --name $CONTAINER_NAME \
              -v ~/rag_data/db:/app/db \
              -v ~/rag_data/documents:/app/documents \
              -v ~/rag_data/models:/app/models \
              -v ~/rag_data/backups:/app/backups \
              -v ~/ragforq_logs:/app/logs \
              -v ~/.cache/huggingface:/root/.cache/huggingface \
              -v /mnt/winshare/MIC:/mnt/winshare/MIC \
              -e ENVIRONMENT=production \
              "${IMAGE_TO_RUN}"

            echo "-> Waiting for container to start..."
            sleep 10
            
            echo "-> Checking container status..."
            if docker ps | grep -q $CONTAINER_NAME; then
                echo "-> ✅ Container is running"
                
                echo "-> Checking application GPU status..."
                docker logs $CONTAINER_NAME 2>&1 | grep -E "(GPU|CPU)" | tail -5 || echo "-> GPU status check pending..."
                
                echo "-> Testing API endpoint..."
                if curl -f http://localhost:8000/ >/dev/null 2>&1; then
                    echo "-> ✅ API is responding"
                else
                    echo "-> ⚠️ API not yet ready (may need more time)"
                fi
            else
                echo "-> ❌ Container failed to start"
                docker logs $CONTAINER_NAME
                exit 1
            fi

            echo "-> Cleaning up..."
            docker image prune -f
            rm /home/qsiadmin/ragforq-app.tar
            
            echo "-> ✅ Deployment successful!"
          EOF
